'use strict';

class Regex {
    static isCanadianPostalCode(postalCode) {
        return /^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$/.test(postalCode);
    }

    static isVisaCreditCardNumber(creditCardNumber) {
        return /^4[0-9]{12}(?:[0-9]{3})?$/.test(creditCardNumber);
    }

    static isMastercardCreditCardNumber(creditCardNumber) {
        return /^5[1-5][0-9]{14}$/.test(creditCardNumber);
    }

    static isAda95NumericLiteral(creditCardNumber) {
        
    }

    static isAllBasicLatinLetters(letterString) {

    }

    static isBinaryNumberDivisibleBy16(binaryString) {
        return /^([0-1]*0000)$/.test(binaryString);
    }

    static isDecimal2Through36(number) {
        return /^([2-9]|[1-2]\d|3[0-6])$/.test(number);
    }

    static isMlStyleComment(string) {
        return /^\(\*.*\*\)$/.test(string);
    }

    static isLatinLetterStringWithoutFileFindOrForWithLookarounds(letterString) {

    }

    static isLatinLetterStringWithoutFileFindOrForNoLookarounds(letterString) {
        return /^((?!file$|find$|for$)[a-zA-Z]*)$/.test(letterString);
    }
}

var assert = (exp) => {
  console.assert(exp);
}

var testRegexes = () => {
    var ohCanada1 = "A0A 0A5"
    var visa1 = "4042433464929277";
    var visa2 = "4539172189352619";
    var masterCard1 = "5322548477306334";
    var masterCard2 = "5165825595889262"
    var discover1 = "6011676854519601";
    var americanExpress1 = "378445367881951";

    assert(Regex.isVisaCreditCardNumber(visa1));
    assert(Regex.isVisaCreditCardNumber(visa2));
    assert(!Regex.isVisaCreditCardNumber(masterCard1));
    assert(!Regex.isVisaCreditCardNumber(masterCard2));
    assert(!Regex.isVisaCreditCardNumber(discover1));
    assert(!Regex.isVisaCreditCardNumber(americanExpress1));
    
    assert(Regex.isMastercardCreditCardNumber(masterCard1));
    assert(Regex.isMastercardCreditCardNumber(masterCard2));
    assert(!Regex.isMastercardCreditCardNumber(visa1));
    assert(!Regex.isMastercardCreditCardNumber(visa2));
    assert(!Regex.isMastercardCreditCardNumber(discover1));
    assert(!Regex.isMastercardCreditCardNumber(americanExpress1));

    assert(Regex.isDecimal2Through36("2"));
    assert(Regex.isDecimal2Through36("36"));
    assert(Regex.isDecimal2Through36("7"));
    assert(!Regex.isDecimal2Through36("0"));
    assert(!Regex.isDecimal2Through36("37"));

    assert(Regex.isBinaryNumberDivisibleBy16("10000"));
    assert(!Regex.isBinaryNumberDivisibleBy16("12000"))
    assert(!Regex.isBinaryNumberDivisibleBy16("1000"));

    assert(!Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("find"));
    assert(!Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("file"));
    assert(!Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("for"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("finda"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("findA"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("afind"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("Afind"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("fora"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("forA"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("afor"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("Afor"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("filea"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("fileA"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("afile"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("Afile"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("hello"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("world"));
}();