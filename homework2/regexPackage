'use strict';

class Regex {
    static isCanadianPostalCode(postalCode) {

    }

    static isVisaCreditCardNumber(creditCardNumber) {

    }

    static isMastercardCreditCardNumber(creditCardNumber) {
        
    }

    static isAda95NumericLiteral(creditCardNumber) {
        
    }

    static isAllBasicLatinLetters(letterString) {

    }

    static isBinaryNumberDivisibleBy16(binaryString) {
        /^([0-1]*0000)$/.test(binaryString);
    }

    static isDecimal2Through36(number) {
        /^([2-9]|[1-2]\d|3[0-6])$/.test(number);
    }

    static isMlStyleComment(string) {
        /^\(\*.*\*\)$/.test(string);
    }

    static isLatinLetterStringWithoutFileFindOrForWithLookarounds(letterString) {

    }

    static isLatinLetterStringWithoutFileFindOrForNoLookarounds(letterString) {
        /^((?!file$|find$|for$)[a-zA-Z]*)$/.test(letterString);
    }
}

var assert = (exp) => {
  console.assert(exp);
}

var testRegexes = () => {
    assert(Regex.isDecimal2Through36("2"));
    assert(Regex.isDecimal2Through36("36"));
    assert(Regex.isDecimal2Through36("7"));
    assert(!Regex.isDecimal2Through36("0"));
    assert(!Regex.isDecimal2Through36("37"));

    assert(Regex.isBinaryNumberDivisibleBy16("10000"));
    assert(!Regex.isBinaryNumberDivisibleBy16("12000"))
    assert(!Regex.isBinaryNumberDivisibleBy16("1000"));

    assert(!Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("find"));
    assert(!Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("file"));
    assert(!Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("for"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("finda"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("findA"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("afind"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("Afind"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("fora"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("forA"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("afor"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("Afor"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("filea"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("fileA"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("afile"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("Afile"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("hello"));
    assert(Regex.isLatinLetterStringWithoutFileFindOrForWithLookarounds("world"));
}();